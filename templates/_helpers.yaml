{{/* Standard Airflow environment variables */}}
{{- define "standard_airflow_environment" }}
  # Hard Coded Airflow Envs
  - name: ASTRONOMER__AIRFLOW__WORKER_LOG_RETENTION_DAYS
    value: "3"
  - name: COMPONENT # Checked by entrypoint when sidecar logging is enabled
    valueFrom:
      fieldRef:
        fieldPath: metadata.labels['component']
  {{- /*
    Everything below here needs to be kept in sync with the airflow oss chart
  */}}
  {{- if .Values.enableBuiltInSecretEnvVars.AIRFLOW__CORE__FERNET_KEY }}
  - name: AIRFLOW__CORE__FERNET_KEY
    valueFrom:
      secretKeyRef:
        name: {{ template "fernet_key_secret" . }}
        key: fernet-key
  {{- end }}
  # For Airflow <2.3, backward compatibility; moved to [database] in 2.3
  {{- if .Values.enableBuiltInSecretEnvVars.AIRFLOW__CORE__SQL_ALCHEMY_CONN }}
  - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN
    valueFrom:
      secretKeyRef:
        name: {{ template "airflow_metadata_secret" . }}
        key: connection
  {{- end }}
  {{- if .Values.enableBuiltInSecretEnvVars.AIRFLOW__DATABASE__SQL_ALCHEMY_CONN }}
  - name: AIRFLOW__DATABASE__SQL_ALCHEMY_CONN
    valueFrom:
      secretKeyRef:
        name: {{ template "airflow_metadata_secret" . }}
        key: connection
  {{- end }}
  {{- if .Values.enableBuiltInSecretEnvVars.AIRFLOW_CONN_AIRFLOW_DB }}
  - name: AIRFLOW_CONN_AIRFLOW_DB
    valueFrom:
      secretKeyRef:
        name: {{ template "airflow_metadata_secret" . }}
        key: connection
  {{- end }}
  {{- if .Values.enableBuiltInSecretEnvVars.AIRFLOW__WEBSERVER__SECRET_KEY }}
  - name: AIRFLOW__WEBSERVER__SECRET_KEY
    valueFrom:
      secretKeyRef:
        name: {{ template "webserver_secret_key_secret" . }}
        key: webserver-secret-key
  {{- end }}
  {{- if or (eq .Values.executor "CeleryExecutor") (eq .Values.executor "CeleryKubernetesExecutor") }}
    {{- if or (semverCompare "<2.4.0" .Values.airflowVersion) (.Values.data.resultBackendSecretName) (.Values.data.resultBackendConnection) }}
    {{- if .Values.enableBuiltInSecretEnvVars.AIRFLOW__CELERY__CELERY_RESULT_BACKEND }}
  # (Airflow 1.10.* variant)
  - name: AIRFLOW__CELERY__CELERY_RESULT_BACKEND
    valueFrom:
      secretKeyRef:
        name: {{ template "airflow_result_backend_secret" . }}
        key: connection
    {{- end }}
    {{- if .Values.enableBuiltInSecretEnvVars.AIRFLOW__CELERY__RESULT_BACKEND }}
  - name: AIRFLOW__CELERY__RESULT_BACKEND
    valueFrom:
      secretKeyRef:
        name: {{ template "airflow_result_backend_secret" . }}
        key: connection
    {{- end }}
    {{- end }}
    {{- if .Values.enableBuiltInSecretEnvVars.AIRFLOW__CELERY__BROKER_URL }}
  - name: AIRFLOW__CELERY__BROKER_URL
    valueFrom:
      secretKeyRef:
        name: {{ default (printf "%s-broker-url" .Release.Name) .Values.data.brokerUrlSecretName }}
        key: connection
    {{- end }}
  {{- end }}
  {{- if .Values.elasticsearch.enabled }}
  # The elasticsearch variables were updated to the shorter names in v1.10.4
    {{- if .Values.enableBuiltInSecretEnvVars.AIRFLOW__ELASTICSEARCH__HOST }}
  - name: AIRFLOW__ELASTICSEARCH__HOST
    valueFrom:
      secretKeyRef:
        name: {{ template "elasticsearch_secret" . }}
        key: connection
    {{- end }}
    {{- if .Values.enableBuiltInSecretEnvVars.AIRFLOW__ELASTICSEARCH__ELASTICSEARCH_HOST }}
  # This is the older format for these variable names, kept here for backward compatibility
  - name: AIRFLOW__ELASTICSEARCH__ELASTICSEARCH_HOST
    valueFrom:
      secretKeyRef:
        name: {{ template "elasticsearch_secret" . }}
        key: connection
    {{- end }}
  {{- end }}
  {{- if semverCompare ">=3.0.0" .Values.airflowVersion }}
  - name: AIRFLOW__API_AUTH__JWT_SECRET
    valueFrom:
      secretKeyRef:
        name: {{ template "fernet_key_secret" . }}
        key: fernet-key
  - name: AIRFLOW__CORE__AUTH_MANAGER
    value: astronomer.runtime.auth_managers.astro.AstroAuthManager
  {{- end }}
{{- end }}

{{ define "deployments_subdomain" -}}
{{ printf "deployments.%s" .Values.ingress.baseDomain }}
{{- end }}

{{ define "airflow_subdomain" -}}
{{ .Release.Name }}-airflow.{{ .Values.ingress.baseDomain }}
{{- end }}

{{ define "flower_subdomain" -}}
{{ .Release.Name }}-flower.{{ .Values.ingress.baseDomain }}
{{- end }}

{{ define "default_nginx_server_settings" }}
# Disable Nginx Server version
server_tokens off;
client_max_body_size        1024m;
{{ end }}

{{ define "default_nginx_settings" }}
internal;
proxy_pass_request_body     off;
proxy_set_header            Content-Length          "";
proxy_set_header            X-Forwarded-Proto       "";
proxy_set_header            X-Original-URL          https://$http_host$request_uri;
proxy_set_header            X-Original-Method       $request_method;
proxy_set_header            X-Real-IP               $remote_addr;
proxy_set_header            X-Forwarded-For         $remote_addr;
proxy_set_header            X-Auth-Request-Redirect $request_uri;
proxy_buffering             off;
proxy_buffer_size           4k;
proxy_buffers               4 4k;
proxy_request_buffering     on;
proxy_http_version          1.1;
proxy_ssl_server_name       on;
proxy_pass_request_headers  on;
{{ end }}

{{ define "default_nginx_auth_headers" }}
auth_request_set $authHeader0 $upstream_http_authorization;
proxy_set_header 'authorization' $authHeader0;
auth_request_set $authHeader1 $upstream_http_username;
proxy_set_header 'username' $authHeader1;
auth_request_set $authHeader2 $upstream_http_email;
proxy_set_header 'email' $authHeader2;
{{ end }}

{{ define "default_nginx_settings_location" }}
auth_request     /auth;
auth_request_set $auth_status $upstream_status;
auth_request_set $auth_cookie $upstream_http_set_cookie;
add_header       Set-Cookie $auth_cookie;
error_page 401 = @401_auth_error;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection 'connection_upgrade';
proxy_set_header X-Real-IP              $remote_addr;
proxy_set_header X-Forwarded-For        $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_cache_bypass $http_upgrade;
proxy_set_header X-Original-Forwarded-For $http_x_forwarded_for;
proxy_connect_timeout                   15s;
proxy_send_timeout                      600s;
proxy_read_timeout                      600s;
proxy_buffering                         off;
proxy_buffer_size                       4k;
proxy_buffers                           4 4k;
proxy_max_temp_file_size                1024m;
proxy_request_buffering                 on;
proxy_http_version                      1.1;
proxy_cookie_domain                     off;
proxy_redirect                          off;
{{ end }}

{{/*
Create the name of the dag-server service account to use
*/}}
{{- define "astro.dagDeploy.serviceAccountName" -}}
{{- if .Values.dagDeploy.serviceAccount.create -}}
    {{ default (printf "%s-dag-server" (include "airflow.fullname" .)) .Values.dagDeploy.serviceAccount.name }}
{{- else -}}
    {{- tpl (default "default" .Values.dagDeploy.serviceAccount.name) . -}}
{{- end -}}
{{- end -}}

{{/*
Create the name of the git-sync-relay service account to use
*/}}
{{- define "astro.gitSyncRelay.serviceAccountName" -}}
{{- if .Values.gitSyncRelay.serviceAccount.create -}}
    {{ default (printf "%s-git-sync-relay" (include "airflow.fullname" .)) .Values.gitSyncRelay.serviceAccount.name }}
{{- else -}}
    {{- tpl (default "default" .Values.gitSyncRelay.serviceAccount.name) . -}}
{{- end -}}
{{- end -}}

{{/*
Create the name of the webserver service account to use
*/}}
{{- define "astro.webserver.serviceAccountName" -}}
{{- if .Values.airflow.webserver.serviceAccount.create -}}
    {{ default (printf "%s-webserver" (include "airflow.serviceAccountName" .)) .Values.airflow.webserver.serviceAccount.name }}
{{- else -}}
    {{- tpl (default "default" .Values.airflow.webserver.serviceAccount.name) . -}}
{{- end -}}
{{- end -}}

{{/*
Create the name of the redis service account to use
*/}}
{{- define "astro.redis.serviceAccountName" -}}
{{- if .Values.airflow.redis.serviceAccount.create -}}
    {{ default (printf "%s-redis" (include "airflow.serviceAccountName" .)) .Values.airflow.redis.serviceAccount.name }}
{{- else -}}
    {{- tpl (default "default" .Values.airflow.redis.serviceAccount.name) . -}}
{{- end -}}
{{- end -}}

{{/*
Create the name of the flower service account to use
*/}}
{{- define "astro.flower.serviceAccountName" -}}
{{- if .Values.airflow.flower.serviceAccount.create -}}
    {{ default (printf "%s-flower" (include "airflow.serviceAccountName" .)) .Values.airflow.flower.serviceAccount.name }}
{{- else -}}
    {{- tpl (default "default" .Values.airflow.flower.serviceAccount.name) . -}}
{{- end -}}
{{- end -}}

{{/*
Create the name of the scheduler service account to use
*/}}
{{- define "astro.scheduler.serviceAccountName" -}}
{{- if .Values.airflow.scheduler.serviceAccount.create -}}
    {{ default (printf "%s-scheduler" (include "airflow.serviceAccountName" .)) .Values.airflow.scheduler.serviceAccount.name }}
{{- else -}}
    {{- tpl (default "default" .Values.airflow.scheduler.serviceAccount.name) . -}}
{{- end -}}
{{- end -}}

{{/*
Create the name of the statsd service account to use
*/}}
{{- define "astro.statsd.serviceAccountName" -}}
{{- if .Values.airflow.statsd.serviceAccount.create -}}
    {{ default (printf "%s-statsd" (include "airflow.serviceAccountName" .)) .Values.airflow.statsd.serviceAccount.name }}
{{- else -}}
    {{- tpl (default "default" .Values.airflow.statsd.serviceAccount.name) . -}}
{{- end -}}
{{- end -}}

{{/*
Create the name of the create user job service account to use
*/}}
{{- define "astro.createUserJob.serviceAccountName" -}}
{{- if .Values.airflow.createUserJob.serviceAccount.create -}}
    {{ default (printf "%s-create-user-job" (include "airflow.serviceAccountName" .)) .Values.airflow.createUserJob.serviceAccount.name }}
{{- else -}}
    {{- tpl (default "default" .Values.airflow.createUserJob.serviceAccount.name) . -}}
{{- end -}}
{{- end -}}

{{/*
Create the name of the migrate database job service account to use
*/}}
{{- define "astro.migrateDatabaseJob.serviceAccountName" -}}
{{- if .Values.airflow.migrateDatabaseJob.serviceAccount.create -}}
    {{ default (printf "%s-migrate-database-job" (include "airflow.serviceAccountName" .)) .Values.airflow.migrateDatabaseJob.serviceAccount.name }}
{{- else -}}
    {{- tpl (default "default" .Values.airflow.migrateDatabaseJob.serviceAccount.name) . -}}
{{- end -}}
{{- end -}}

{{/*
Create the name of the worker service account to use
*/}}
{{- define "astro.worker.serviceAccountName" -}}
{{- if .Values.airflow.workers.serviceAccount.create -}}
    {{ default (printf "%s-worker" (include "airflow.serviceAccountName" .)) .Values.airflow.workers.serviceAccount.name }}
{{- else -}}
    {{- tpl (default "default" .Values.airflow.workers.serviceAccount.name) . -}}
{{- end -}}
{{- end -}}

{{/*
Create the name of the triggerer service account to use
*/}}
{{- define "astro.triggerer.serviceAccountName" -}}
{{- if .Values.airflow.triggerer.serviceAccount.create -}}
    {{ default (printf "%s-triggerer" (include "airflow.serviceAccountName" .)) .Values.airflow.triggerer.serviceAccount.name }}
{{- else -}}
    {{- tpl (default "default" .Values.airflow.triggerer.serviceAccount.name) . -}}
{{- end -}}
{{- end -}}

{{/*
Create the name of the pgbouncer service account to use
*/}}
{{- define "astro.pgbouncer.serviceAccountName" -}}
{{- if .Values.airflow.pgbouncer.serviceAccount.create -}}
    {{ default (printf "%s-pgbouncer" (include "airflow.serviceAccountName" .)) .Values.airflow.pgbouncer.serviceAccount.name }}
{{- else -}}
    {{- tpl (default "default" .Values.airflow.pgbouncer.serviceAccount.name) . -}}
{{- end -}}
{{- end -}}

{{/*
Create the name of the cleanup service account to use
*/}}
{{- define "astro.cleanup.serviceAccountName" -}}
{{- if .Values.airflow.cleanup.serviceAccount.create -}}
    {{ default (printf "%s-cleanup" (include "airflow.serviceAccountName" .)) .Values.airflow.cleanup.serviceAccount.name }}
{{- else -}}
    {{- tpl (default "default" .Values.airflow.cleanup.serviceAccount.name) . -}}
{{- end -}}
{{- end -}}

{{/* Create the name of the dag processor service account to use */}}
{{- define "astro.dagProcessor.serviceAccountName" -}}
{{- if .Values.airflow.dagProcessor.serviceAccount.create }}
  {{- default (printf "%s-dag-processor" (include "airflow.serviceAccountName" .)) .Values.airflow.dagProcessor.serviceAccount.name }}
{{- else }}
  {{- tpl (default "default" .Values.airflow.dagProcessor.serviceAccount.name) . -}}
{{- end }}
{{- end }}

{{- define "astro.registry_secret" -}}
  {{- default (printf "%s-registry" .Release.Name) .Values.airflow.registry.secretName }}
{{- end }}

{{- define "logging_sidecar_container_spec" -}}
- name: {{ .Values.loggingSidecar.name }}
  image: "{{ .Values.loggingSidecar.image }}"
  {{- if .Values.loggingSidecar.resources }}
  resources: {{- toYaml .Values.loggingSidecar.resources | nindent 4 }}
  {{- end }}
  securityContext:
    readOnlyRootFilesystem: true
  env:
  - name: VECTOR_CONFIG
    value: /etc/sidecar-logging/vector-config.yaml
  - name: SIDECAR_LOGS
    value: /var/log/sidecar-logging-consumer
  - name: COMPONENT
    valueFrom:
      fieldRef:
        apiVersion: v1
        fieldPath: metadata.labels['component']
  - name: RELEASE
    valueFrom:
      fieldRef:
        apiVersion: v1
        fieldPath: metadata.labels['release']
  - name: WORKSPACE
    valueFrom:
      fieldRef:
        apiVersion: v1
        fieldPath: metadata.labels['workspace']
{{- if .Values.loggingSidecar.livenessProbe  }}
  livenessProbe: {{ tpl (toYaml .Values.loggingSidecar.livenessProbe) . | nindent 4 }}
{{- end }}
{{- if .Values.loggingSidecar.readinessProbe  }}
  readinessProbe: {{ tpl (toYaml .Values.loggingSidecar.readinessProbe) . | nindent 4 }}
{{- end }}
  volumeMounts:
  - mountPath: /etc/sidecar-logging
    name: config-volume
  - name: sidecar-logging-consumer
    mountPath: /var/log/sidecar-logging-consumer
    readOnly: False
{{- end }}

{{- define "auth_sidecar_container_spec" -}}
- name: auth-proxy
  image: "{{ .Values.authSidecar.repository }}:{{ .Values.authSidecar.tag }}"
  imagePullPolicy: {{ .Values.authSidecar.pullPolicy }}
  {{- if .Values.authSidecar.resources }}
  resources: {{- toYaml .Values.authSidecar.resources | nindent 4 }}
  {{- end }}
  securityContext:
  {{- if .Values.authSidecar.securityContext }}
    {{- $required := dict "readOnlyRootFilesystem" true }}
    {{- toYaml (merge $required .Values.authSidecar.securityContext ) | nindent 4 }}
  {{- end }}
    readOnlyRootFilesystem: true
  ports:
  - containerPort: {{ .Values.authSidecar.port }}
    name: auth-proxy
    protocol: TCP
{{- if .Values.authSidecar.readinessProbe  }}
  readinessProbe: {{ tpl (toYaml .Values.authSidecar.readinessProbe) . | nindent 4 }}
{{- else }}
  readinessProbe:
    httpGet:
      path: /healthz
      port: {{ .Values.authSidecar.port }}
      scheme: HTTP
    initialDelaySeconds: 10
    periodSeconds: 10
{{- end }}
{{- if .Values.authSidecar.livenessProbe  }}
  livenessProbe: {{ tpl (toYaml .Values.authSidecar.livenessProbe) . | nindent 4 }}
{{- else }}
  livenessProbe:
    httpGet:
      path: /healthz
      port: {{ .Values.authSidecar.port }}
      scheme: HTTP
    initialDelaySeconds: 10
    periodSeconds: 10
{{- end }}
  volumeMounts:
  - mountPath: /etc/nginx/nginx.conf
    name: nginx-sidecar-conf
    subPath: nginx.conf
{{- end }}

{{/*
Generate log_id_template based on Airflow version
*/}}
{{- define "airflow.logIdTemplate" -}}
{{- if semverCompare ">=3.0.0" .Values.airflowVersion -}}
{dag_id}_{task_id}_{run_id}_{map_index}_{try_number}
{{- else if semverCompare ">=2.3.0" .Values.airflowVersion -}}
{dag_id}-{task_id}-{run_id}-{map_index}-{try_number}
{{- else -}}
{dag_id}_{task_id}_{execution_date}_{try_number}
{{- end -}}
{{- end -}}
