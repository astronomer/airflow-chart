################################
## Airflow ConfigMap
#################################
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "airflow_config" . }}
  labels:
    tier: airflow
    component: config
    release: {{ .Release.Name }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    heritage: {{ .Release.Service }}
{{- with .Values.labels }}
{{ toYaml . | indent 4 }}
{{- end }}
data:
  # These are system-specified config overrides.
  airflow.cfg: |
    [core]
    load_examples = False
    colored_console_log = False
    executor = {{ .Values.executor }}
{{- if .Values.elasticsearch.enabled }}
    remote_logging = True
{{- end }}

    [webserver]
{{- if .Values.ingress.enabled }}
    base_url = {{ printf "https://%s/%s/airflow" (include "deployments_subdomain" .) .Release.Name }}
{{- end }}
    enable_proxy_fix = True
    expose_config = True
    rbac = True

    [celery]
    default_queue = celery

    [scheduler]
    scheduler_heartbeat_sec = 5
{{- if .Values.statsd.enabled }}
    statsd_on = True
    statsd_port = 9125
    statsd_prefix = airflow
    statsd_host = {{ printf "%s-statsd" .Release.Name }}
{{- end }}
    # Restart Scheduler every 41460 seconds (11 hours 31 minutes)
    # The odd time is chosen so it is not always restarting on the same "hour" boundary
    run_duration = 41460

{{- if .Values.elasticsearch.enabled }}
    [elasticsearch]
    # The elasticsearch variables were updated to the shorter names in v1.10.4
    write_stdout = True
    json_format = True
    log_id_template = {dag_id}_{task_id}_{execution_date}_{try_number}

    # This is the older format for these variable names, kept here for backward compatibility
    elasticsearch_write_stdout = True
    elasticsearch_json_format = True
    elasticsearch_log_id_template = {dag_id}_{task_id}_{execution_date}_{try_number}

    [elasticsearch_configs]
    max_retries = 3
    timeout = 30
    retry_timeout = True
{{- end }}

    [kubernetes]
    namespace = {{ .Release.Namespace }}
    airflow_configmap = {{ include "airflow_config" . }}
    airflow_local_settings_configmap = {{ include "airflow_config" . }}
    worker_container_repository = {{ .Values.images.airflow.repository }}
    worker_container_tag = {{ .Values.images.airflow.tag }}
    worker_container_image_pull_policy = {{ .Values.images.airflow.pullPolicy }}
    dags_in_image = True
    delete_worker_pods = True
    {{- if semverCompare ">=1.10.12" .Values.airflowVersion }}
    pod_template_file = {{ include "airflow_pod_template_file" . }}/pod_template_file.yaml
    {{- else }}
    worker_service_account_name = {{ .Release.Name }}-worker-serviceaccount
    image_pull_secrets = {{ template "registry_secret" . }}
    [kubernetes_labels]
    tier = airflow
    component = worker
    release = {{ .Release.Name }}
    platform = {{ .Values.platform.release }}
    workspace = {{ .Values.platform.workspace }}

    [kubernetes_secrets]
    AIRFLOW__CORE__SQL_ALCHEMY_CONN = {{ printf "%s=connection" (include "airflow_metadata_secret" .) }}
    AIRFLOW__CORE__FERNET_KEY = {{ printf "%s=fernet-key" (include "fernet_key_secret" .) }}
    {{- if .Values.elasticsearch.enabled }}
    AIRFLOW__ELASTICSEARCH__ELASTICSEARCH_HOST = {{ printf "%s=connection" (include "elasticsearch_secret" .) }}
    {{- end }}
    {{- end }}

    [astronomer]
{{- if .Values.webserver.jwtSigningCertificateSecretName }}
    jwt_signing_cert = {{ template "airflow_webserver_jwt_cert_path" . }}
    jwt_audience = {{ printf "%s/%s" ( include "deployments_subdomain" . ) .Release.Name }}
{{- end }}

  webserver_config.py: |
    import os
    from airflow import configuration as conf
    from flask_appbuilder.security.manager import AUTH_REMOTE_USER
    basedir = os.path.abspath(os.path.dirname(__file__))

    # The SQLAlchemy connection string.
    SQLALCHEMY_DATABASE_URI = conf.get('core', 'SQL_ALCHEMY_CONN')

    # Flask-WTF flag for CSRF
    CSRF_ENABLED = True

    # ----------------------------------------------------
    # AUTHENTICATION CONFIG
    # ----------------------------------------------------
{{- if .Values.webserver.jwtSigningCertificateSecretName }}
    AUTH_TYPE = AUTH_REMOTE_USER

    from astronomer.flask_appbuilder.security import AirflowAstroSecurityManager
    SECURITY_MANAGER_CLASS = AirflowAstroSecurityManager
{{- end }}

{{- if .Values.scheduler.airflowLocalSettings }}
  airflow_local_settings.py: |
    {{ .Values.scheduler.airflowLocalSettings | nindent 4 }}
{{- else }}
  airflow_local_settings.py: |
    {{- if semverCompare "<1.10.12" .Values.airflowVersion }}

    from airflow.contrib.kubernetes.pod import Pod
    from airflow.configuration import conf


    def pod_mutation_hook(pod: Pod):

        extra_labels = {
            "kubernetes_executor": "False",
            "kubernetes_pod_operator": "False"
        }

        if 'airflow-worker' in pod.labels.keys() or \
                conf.get('core', 'EXECUTOR') == "KubernetesExecutor":
            extra_labels["kubernetes_executor"] = "True"
        else:
            extra_labels["kubernetes_pod_operator"] = "True"

        pod.labels.update(extra_labels)
        pod.tolerations += {{ toJson .Values.podMutation.tolerations }}
        pod.affinity.update({{ toJson .Values.podMutation.affinity }})
    {{- else }}
    from kubernetes.client import models as k8s
    from airflow.configuration import conf


    def pod_mutation_hook(pod: k8s.V1Pod):

        extra_labels = {
            "kubernetes_executor": "False",
            "kubernetes_pod_operator": "False"
        }


        if 'airflow-worker' in pod.metadata.labels.keys() or \
                conf.get('core', 'EXECUTOR') == "KubernetesExecutor":
            extra_labels["kubernetes_executor"] = "True"
        else:
            extra_labels["kubernetes_pod_operator"] = "True"

        pod.metadata.labels.update(extra_labels)
        if pod.spec.tolerations:
            pod.spec.tolerations += {{ toJson .Values.podMutation.tolerations }}
        else:
            pod.spec.tolerations = {{ toJson .Values.podMutation.tolerations }}

        if pod.spec.affinity:
            pod.spec.affinity = pod.spec.affinity.to_dict().update({{ toJson .Values.podMutation.affinity }})
        else:
            pod.spec.affinity = {{ toJson .Values.podMutation.affinity }}

    {{- end }}
{{- end }}
{{- if eq .Values.executor "KubernetesExecutor" }}
{{- if semverCompare ">=1.10.12" .Values.airflowVersion }}
  pod_template_file.yaml: |-
    {{- if .Values.podTemplate }}
    {{ .Values.podTemplate | nindent 4 }}
    {{- else }}
    {{ tpl (.Files.Get "files/pod-template-file.yaml") . | nindent 4 }}
    {{- end }}
{{- end }}
{{- end }}
