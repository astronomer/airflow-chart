############################
## dag-server StatefulSet ##
############################
{{- if .Values.dagDeploy.enabled }}
{{- $nodeSelector := or .Values.dagDeploy.nodeSelector .Values.airflow.nodeSelector }}
{{- $affinity := or .Values.dagDeploy.affinity .Values.airflow.affinity }}
{{- $tolerations := or .Values.dagDeploy.tolerations .Values.airflow.tolerations }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-dag-server
  labels:
    component: dag-server
    tier: airflow
    release: {{ .Release.Name }}
    chart: "{{ .Release.Name }}-{{ .Chart.Version }}"
    heritage: {{ .Release.Service }}
    {{- with .Values.labels }}
      {{- toYaml . | nindent 4 }}
    {{- end }}
spec:
  {{- if and .Values.dagDeploy.persistence.enabled .Values.dagDeploy.persistence.persistentVolumeClaimRetentionPolicy }}
  persistentVolumeClaimRetentionPolicy: {{- toYaml .Values.dagDeploy.persistence.persistentVolumeClaimRetentionPolicy  | nindent 4 }}
  {{ end }}
  replicas: 1
  selector:
    matchLabels:
      component: dag-server
      tier: airflow
      release: {{ .Release.Name }}
  serviceName: {{ .Release.Name }}-dag-server
  template:
    metadata:
      labels:
        component: dag-server
        tier: airflow
        release: {{ .Release.Name }}
        chart: "{{ .Release.Name }}-{{ .Chart.Version }}"
        heritage: {{ .Release.Service }}
        {{- with .Values.labels }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- if or .Values.airflow.registry.secretName .Values.airflow.registry.connection }}
      imagePullSecrets:
        - name: {{ template "astro.registry_secret" . }}
      {{- end }}
      nodeSelector: {{- toYaml $nodeSelector | nindent 8 }}
      affinity: {{- toYaml $affinity | nindent 8 }}
      tolerations: {{- toYaml $tolerations | nindent 8 }}
      terminationGracePeriodSeconds: {{ .Values.dagDeploy.terminationGracePeriodSeconds }}
      serviceAccountName: {{ template "astro.dagDeploy.serviceAccountName" . }}
      securityContext: {{ toYaml .Values.dagDeploy.securityContexts.pod | nindent 8 }}
      containers:
        - name: dag-server
          image: "{{ .Values.dagDeploy.images.dagServer.repository }}:{{ .Values.dagDeploy.images.dagServer.tag }}"
          imagePullPolicy: {{ .Values.dagDeploy.images.dagServer.pullPolicy }}
          {{- if .Values.loggingSidecar.enabled }}
          command: ["bash"]
          args:
            - -c
            - sanic dag_deploy.server.app -H 0.0.0.0 1> >( tee -a /var/log/sidecar-logging-consumer/out.log ) 2> >( tee -a /var/log/sidecar-logging-consumer/err.log >&2 )
          {{ else }}
          command: ["sanic", "dag_deploy.server.app", "-H", "0.0.0.0"]
          {{ end }}
          ports:
          - name: server
            containerPort: {{ .Values.dagDeploy.ports.dagServerHttp }}
          securityContext: {{ toYaml .Values.dagDeploy.securityContexts.container | nindent 12 }}
          resources:
            {{- toYaml .Values.dagDeploy.resources | nindent 12 }}
          env:
{{- if .Values.dagDeploy.extraEnv }}
{{ toYaml .Values.dagDeploy.extraEnv | indent 10 }}
{{- end }}
        {{- if .Values.dagDeploy.livenessProbe  }}
          livenessProbe: {{ tpl (toYaml .Values.dagDeploy.livenessProbe) . | nindent 12 }}
        {{- else }}
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: {{ .Values.dagDeploy.ports.dagServerHttp }}
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
        {{- end }}
        {{- if .Values.dagDeploy.readinessProbe  }}
          readinessProbe: {{ tpl (toYaml .Values.dagDeploy.readinessProbe) . | nindent 12 }}
        {{- else }}
          readinessProbe:
            httpGet:
              path: /healthz
              port: {{ .Values.dagDeploy.ports.dagServerHttp }}
            initialDelaySeconds: 10
            periodSeconds: 10
        {{ end }}
          volumeMounts:
          - name: data
            mountPath: /data
            readOnly: false
          {{- if .Values.loggingSidecar.enabled }}
          - mountPath: /var/log/sidecar-logging-consumer
            name: sidecar-logging-consumer
          {{ end }}
{{- if .Values.authSidecar.enabled }}
{{- include "authsidecar_container_spec" . | nindent 8 }}
{{- end }}
{{- if .Values.loggingSidecar.enabled }}
{{- include "sidecar_container_spec" . | nindent 8 }}
{{- end }}
{{- if .Values.dagDeploy.extraContainers }}
{{- toYaml .Values.dagDeploy.extraContainers | nindent 8 }}
{{- end }}
      volumes:
{{- if .Values.authSidecar.enabled }}
      - name: nginx-sidecar-conf
        configMap:
          name: {{ .Release.Name }}-dag-server-nginx-conf
{{- end }}
{{- if .Values.loggingSidecar.enabled }}
      - name: config-volume
        configMap:
          name: {{ .Release.Name }}-sidecar-config
      - emptyDir: {}
        name: sidecar-logging-consumer
{{- end }}
  volumeClaimTemplates:
  - metadata:
      name: data
      {{- if .Values.dagDeploy.persistence.annotations }}
      annotations:
        {{- toYaml .Values.dagDeploy.persistence.annotations | nindent 10 }}
      {{- end }}
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: {{ .Values.dagDeploy.persistence.size }}
      {{- if .Values.dagDeploy.persistence.storageClass }}
      storageClassName: {{ .Values.dagDeploy.persistence.storageClass }}
      {{- end }}
{{- end }}
